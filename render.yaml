services:
  - type: web
    name: agricultural-super-app-api
    env: python
    buildCommand: pip install -r server/requirements.txt
    startCommand: cd server && gunicorn wsgi:app
    buildFilter:
      paths:
        - server/**
    preDeployCommand: python -c "
import os
import sys
import traceback
from sqlalchemy import text

# Add the current directory to sys.path
sys.path.insert(0, os.path.abspath('.'))

try:
    from server import create_app
    from server.database import db
    
    # Import all models to ensure they're included
    from server.models.user import User, UserExpertise, UserFollow
    from server.models.location import Country, StateProvince, Location
    from server.models.crop import Crop, Livestock, UserCrop
    from server.models.post import Category, Tag, Post, Comment, ArticlePostLike
    from server.models.community import Community, CommunityMember, CommunityPost, PostLike, PostComment
    from server.models.expert import ExpertProfile, Consultation, ExpertReview
    from server.models.article import Article
    
    print('Starting database initialization...')
    app = create_app('production')
    
    with app.app_context():
        # Try to drop all tables first to ensure a clean slate
        try:
            print('Attempting to drop existing tables...')
            db.session.execute(text('DROP SCHEMA public CASCADE'))
            db.session.execute(text('CREATE SCHEMA public'))
            db.session.commit()
            print('Successfully dropped existing tables.')
        except Exception as e:
            print(f'Error dropping tables: {str(e)}')
            db.session.rollback()
            print('Proceeding with table creation...')
        
        # Create all tables
        print('Creating database tables...')
        db.create_all()
        print('Database tables created successfully!')
        
        # Create initial data
        print('Creating initial data...')
        if not User.query.filter_by(email='admin@example.com').first():
            admin = User(
                email='admin@example.com',
                password='adminpassword',
                first_name='Admin',
                last_name='User',
                role='admin'
            )
            db.session.add(admin)
            db.session.commit()
            print('Admin user created!')
        
        if not Country.query.first():
            country = Country(name='United States', code='US')
            db.session.add(country)
            db.session.commit()
            print('Default country created!')
            
            state = StateProvince(name='California', code='CA', country_id=country.country_id)
            db.session.add(state)
            db.session.commit()
            print('Default state created!')
        
        print('Database initialization complete!')
except Exception as e:
    print(f'Error initializing database: {str(e)}')
    traceback.print_exc()
    sys.exit(1)
"
    envVars:
      - key: FLASK_ENV
        value: production
      - key: ENV
        value: production
      - key: FLASK_APP
        value: wsgi.py
      - key: SECRET_KEY
        generateValue: true
      - key: JWT_SECRET_KEY
        generateValue: true
      - key: DATABASE_URL
        fromDatabase:
          name: agricultural-super-app-db
          property: connectionString
      - key: CLOUDINARY_CLOUD_NAME
        sync: false
      - key: CLOUDINARY_API_KEY
        sync: false
      - key: CLOUDINARY_API_SECRET
        sync: false

databases:
  - name: agricultural-super-app-db
    databaseName: agricultural_super_app
    user: agricultural_super_app_user
    plan: free
